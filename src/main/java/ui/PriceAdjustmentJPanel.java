 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ProductManagement.Product;
import model.Supplier.Supplier;

/**
 *
 * @author likhithng
 */
public class PriceAdjustmentJPanel extends javax.swing.JPanel {
    private JPanel workArea;
    private Supplier supplier;
    private Product selectedProduct;

    

    /**
     * Creates new form PriceJPanel
     */
    public PriceAdjustmentJPanel() {
        
    }

    PriceAdjustmentJPanel(JPanel workArea, Supplier supplier) {
        initComponents();
    this.workArea = workArea;
    this.supplier = supplier;
    btnReduce.addActionListener((java.awt.event.ActionEvent evt) -> {
        btnReduceActionPerformed(evt);
    });
    populateTable();
    initTable();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtShowPrice = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnSimulationResult = new javax.swing.JToggleButton();
        PriceLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PriceTable = new javax.swing.JTable();
        btnIncrease = new javax.swing.JToggleButton();
        txtIncrease = new javax.swing.JTextField();
        txtReduce = new javax.swing.JTextField();
        btnShowCurrentPrice = new javax.swing.JToggleButton();
        btnReduce = new javax.swing.JToggleButton();

        setBackground(new java.awt.Color(204, 204, 204));

        txtShowPrice.setFont(new java.awt.Font("Mali", 0, 14)); // NOI18N

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setFont(new java.awt.Font("Mali", 0, 18)); // NOI18N
        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSimulationResult.setBackground(new java.awt.Color(204, 204, 255));
        btnSimulationResult.setFont(new java.awt.Font("Mali", 0, 14)); // NOI18N
        btnSimulationResult.setText("Simulation Result");
        btnSimulationResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimulationResultActionPerformed(evt);
            }
        });

        PriceLabel.setFont(new java.awt.Font("Mali", 1, 24)); // NOI18N
        PriceLabel.setText("Price Adjustment");

        PriceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product", "Price"
            }
        ));
        jScrollPane1.setViewportView(PriceTable);

        btnIncrease.setBackground(new java.awt.Color(204, 204, 255));
        btnIncrease.setFont(new java.awt.Font("Mali", 0, 14)); // NOI18N
        btnIncrease.setText("Increase");
        btnIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncreaseActionPerformed(evt);
            }
        });

        txtIncrease.setFont(new java.awt.Font("Mali", 0, 14)); // NOI18N
        txtIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIncreaseActionPerformed(evt);
            }
        });

        txtReduce.setFont(new java.awt.Font("Mali", 0, 14)); // NOI18N

        btnShowCurrentPrice.setBackground(new java.awt.Color(204, 204, 255));
        btnShowCurrentPrice.setFont(new java.awt.Font("Mali", 0, 13)); // NOI18N
        btnShowCurrentPrice.setText("Show Current Price");
        btnShowCurrentPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowCurrentPriceActionPerformed(evt);
            }
        });

        btnReduce.setBackground(new java.awt.Color(204, 204, 255));
        btnReduce.setFont(new java.awt.Font("Mali", 0, 13)); // NOI18N
        btnReduce.setText("Reduce");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnBack)
                        .addGap(160, 160, 160)
                        .addComponent(PriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnIncrease, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnShowCurrentPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReduce, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtReduce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtShowPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(btnSimulationResult)))
                .addContainerGap(112, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnIncrease, btnShowCurrentPrice});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtIncrease, txtReduce, txtShowPrice});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIncrease)
                    .addComponent(txtIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReduce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReduce))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowCurrentPrice)
                    .addComponent(txtShowPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addComponent(btnSimulationResult)
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout)workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSimulationResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimulationResultActionPerformed
        // TODO add your handling code here:
        try {
        SimulationPanel simulationPanel = new SimulationPanel(workArea, supplier);
        workArea.add("SimulationPanel", simulationPanel);
        CardLayout cardLayout = (CardLayout) workArea.getLayout();
        cardLayout.show(workArea, "SimulationPanel");
    } catch (Exception e) {
        System.err.println("Error showing simulation panel: " + e.getMessage());
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error opening simulation panel");
    }
    }//GEN-LAST:event_btnSimulationResultActionPerformed

    private void btnIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncreaseActionPerformed
        // TODO add your handling code here:
     int selectedRow = PriceTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product first");
        return;
    }

    try {
        String increaseText = txtIncrease.getText();
        if (increaseText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter an increase amount");
            return;
        }

        double increaseAmount = Double.parseDouble(increaseText);
        String productName = PriceTable.getValueAt(selectedRow, 0).toString();
        
        // Find and update the product
        Product selectedProduct = null;
        for (Product p : supplier.getProductCatalog().getProducts()) {
            if (p.getName().equals(productName)) {
                selectedProduct = p;
                break;
            }
        }
        
        if (selectedProduct != null) {
            int newPrice = selectedProduct.getTargetPrice() + (int)increaseAmount;
            selectedProduct.setTargetPrice(newPrice);
            
            // Update table and UI
            populateTable();
            txtShowPrice.setText(String.valueOf(newPrice));
            txtIncrease.setText("");
            JOptionPane.showMessageDialog(this, "Price increased successfully");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid number");
        txtIncrease.setText("");
    }

}                                           

private void btnReduceActionPerformed(java.awt.event.ActionEvent evt) {                                          
   int selectedRow = PriceTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product first");
        return;
    }

    try {
        String reduceText = txtReduce.getText();
        if (reduceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a decrease amount");
            return;
        }

        double reduceAmount = Double.parseDouble(reduceText);
        String productName = PriceTable.getValueAt(selectedRow, 0).toString();
        
        // Find and update the product
        Product selectedProduct = null;
        for (Product p : supplier.getProductCatalog().getProducts()) {
            if (p.getName().equals(productName)) {
                selectedProduct = p;
                break;
            }
        }
        
        if (selectedProduct != null) {
            int newPrice = selectedProduct.getTargetPrice() - (int)reduceAmount;
            if (newPrice < 0) {
                JOptionPane.showMessageDialog(this, "Price cannot be negative");
                return;
            }
            
            selectedProduct.setTargetPrice(newPrice);
            
            // Update table and UI
            populateTable();
            txtShowPrice.setText(String.valueOf(newPrice));
            txtReduce.setText("");
            JOptionPane.showMessageDialog(this, "Price reduced successfully");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid number");
        txtReduce.setText("");
    }


    }//GEN-LAST:event_btnIncreaseActionPerformed

    private void txtIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIncreaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIncreaseActionPerformed

    private void btnShowCurrentPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowCurrentPriceActionPerformed
        // TODO add your handling code here:
        int selectedRow = PriceTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product from the table first");
        return;
    }
    
    String currentPriceStr = PriceTable.getValueAt(selectedRow, 1).toString();
    txtShowPrice.setText(currentPriceStr);

    }//GEN-LAST:event_btnShowCurrentPriceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PriceLabel;
    private javax.swing.JTable PriceTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JToggleButton btnIncrease;
    private javax.swing.JToggleButton btnReduce;
    private javax.swing.JToggleButton btnShowCurrentPrice;
    private javax.swing.JToggleButton btnSimulationResult;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIncrease;
    private javax.swing.JTextField txtReduce;
    private javax.swing.JTextField txtShowPrice;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
    PriceTable.getSelectionModel().addListSelectionListener(e -> {
        int selectedRow = PriceTable.getSelectedRow();
        if (selectedRow != -1) {
            String currentPrice = PriceTable.getValueAt(selectedRow, 1).toString();
            txtShowPrice.setText(currentPrice);
        }
    });
    }
 
    
   private void populateTable() {
    DefaultTableModel model = (DefaultTableModel) PriceTable.getModel();
    model.setRowCount(0);

    if (supplier != null && supplier.getProductCatalog() != null) {
        ArrayList<Product> products = supplier.getProductCatalog().getProducts();
        for (Product p : products) {
            Object[] row = {
                p.getName(),
                p.getTargetPrice()
            };
            model.addRow(row);
        }
    }
}
      
    }
